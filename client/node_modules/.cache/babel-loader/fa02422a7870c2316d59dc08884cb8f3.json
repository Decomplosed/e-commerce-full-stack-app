{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore } from './f';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('Fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/Bart/Desktop/Courses/Complete_React_Dev_Course_Andrei_Neagoie/e_commerce_full_stack_app/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAAQC,SAAR,QAAwB,KAAxB;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEAD,EAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACD,GALH,EAMGI,KANH,CAMSC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN1B;AAOD;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,SAAS,CACbE,eAAe,CAACkB,uBADH,EAEbjB,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery } from 'redux-saga/effects'\n\nimport {firestore} from './f'\n\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('Fired')\n\n  const collectionRef = firestore.collection('collections')\n\n  collectionRef\n    .get()\n    .then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n      dispatch(fetchCollectionsSuccess(collectionsMap))\n    })\n    .catch(error => dispatch(fetchCollectionsFailure(error.message)))\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  )\n}\n"]},"metadata":{},"sourceType":"module"}